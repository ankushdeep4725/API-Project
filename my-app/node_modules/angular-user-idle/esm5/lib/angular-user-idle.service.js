/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { Subject, merge, fromEvent, from, interval, timer, of } from 'rxjs';
import { bufferTime, distinctUntilChanged, filter, finalize, map, scan, switchMap, take, takeUntil, tap } from 'rxjs/operators';
import { UserIdleConfig } from './angular-user-idle.config';
import * as i0 from "@angular/core";
import * as i1 from "./angular-user-idle.config";
/**
 * User's idle service.
 */
var UserIdleService = /** @class */ (function () {
    function UserIdleService(config) {
        this.timerStart$ = new Subject();
        this.timeout$ = new Subject();
        /**
         * Idle value in seconds.
         * Default equals to 10 minutes.
         */
        this.idle = 600;
        /**
         * Timeout value in seconds.
         * Default equals to 5 minutes.
         */
        this.timeout = 300;
        /**
         * Ping value in seconds.
         * * Default equals to 2 minutes.
         */
        this.ping = 120;
        if (config) {
            this.idle = config.idle;
            this.timeout = config.timeout;
            this.ping = config.ping;
        }
        this.activityEvents$ = merge(fromEvent(window, 'mousemove'), fromEvent(window, 'resize'), fromEvent(document, 'keydown'));
        this.idle$ = from(this.activityEvents$);
    }
    /**
     * Start watching for user idle and setup timer and ping.
     */
    /**
     * Start watching for user idle and setup timer and ping.
     * @return {?}
     */
    UserIdleService.prototype.startWatching = /**
     * Start watching for user idle and setup timer and ping.
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.idleSubscription) {
            this.idleSubscription.unsubscribe();
        }
        // If any of user events is not active for idle-seconds when start timer.
        this.idleSubscription = this.idle$
            .pipe(bufferTime(5000), // Starting point of detecting of user's inactivity
        // Starting point of detecting of user's inactivity
        filter(function (arr) { return !arr.length && !_this.isInactivityTimer; }), tap(function () { return _this.isInactivityTimer = true; }), switchMap(function () {
            return interval(1000).pipe(takeUntil(merge(_this.activityEvents$, timer(_this.idle * 1000).pipe(tap(function () { return _this.timerStart$.next(true); })))), finalize(function () { return (_this.isInactivityTimer = false); }));
        }))
            .subscribe();
        this.setupTimer(this.timeout);
        this.setupPing(this.ping);
    };
    /**
     * @return {?}
     */
    UserIdleService.prototype.stopWatching = /**
     * @return {?}
     */
    function () {
        this.stopTimer();
        if (this.idleSubscription) {
            this.idleSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    UserIdleService.prototype.stopTimer = /**
     * @return {?}
     */
    function () {
        this.timerStart$.next(false);
    };
    /**
     * @return {?}
     */
    UserIdleService.prototype.resetTimer = /**
     * @return {?}
     */
    function () {
        this.stopTimer();
        this.isTimeout = false;
    };
    /**
     * Return observable for timer's countdown number that emits after idle.
     */
    /**
     * Return observable for timer's countdown number that emits after idle.
     * @return {?}
     */
    UserIdleService.prototype.onTimerStart = /**
     * Return observable for timer's countdown number that emits after idle.
     * @return {?}
     */
    function () {
        var _this = this;
        return this.timerStart$.pipe(distinctUntilChanged(), switchMap(function (start) { return (start ? _this.timer$ : of(null)); }));
    };
    /**
     * Return observable for timeout is fired.
     */
    /**
     * Return observable for timeout is fired.
     * @return {?}
     */
    UserIdleService.prototype.onTimeout = /**
     * Return observable for timeout is fired.
     * @return {?}
     */
    function () {
        var _this = this;
        return this.timeout$.pipe(filter(function (timeout) { return !!timeout; }), tap(function () { return _this.isTimeout = true; }), map(function () { return true; }));
    };
    /**
     * @return {?}
     */
    UserIdleService.prototype.getConfigValue = /**
     * @return {?}
     */
    function () {
        return {
            idle: this.idle,
            timeout: this.timeout,
            ping: this.ping
        };
    };
    /**
     * Set config values.
     * @param config
     */
    /**
     * Set config values.
     * @param {?} config
     * @return {?}
     */
    UserIdleService.prototype.setConfigValues = /**
     * Set config values.
     * @param {?} config
     * @return {?}
     */
    function (config) {
        if (this.idleSubscription && !this.idleSubscription.closed) {
            console.error('Call stopWatching() before set config values');
            return;
        }
        if (config.idle) {
            this.idle = config.idle;
        }
        if (config.ping) {
            this.ping = config.ping;
        }
        if (config.timeout) {
            this.timeout = config.timeout;
        }
    };
    /**
     * Setup timer.
     *
     * Counts every seconds and return n+1 and fire timeout for last count.
     * @param timeout Timeout in seconds.
     */
    /**
     * Setup timer.
     *
     * Counts every seconds and return n+1 and fire timeout for last count.
     * @param {?} timeout Timeout in seconds.
     * @return {?}
     */
    UserIdleService.prototype.setupTimer = /**
     * Setup timer.
     *
     * Counts every seconds and return n+1 and fire timeout for last count.
     * @param {?} timeout Timeout in seconds.
     * @return {?}
     */
    function (timeout) {
        var _this = this;
        this.timer$ = interval(1000).pipe(take(timeout), map(function () { return 1; }), scan(function (acc, n) { return acc + n; }), tap(function (count) {
            if (count === timeout) {
                _this.timeout$.next(true);
            }
        }));
    };
    /**
     * Setup ping.
     *
     * Pings every ping-seconds only if is not timeout.
     * @param ping
     */
    /**
     * Setup ping.
     *
     * Pings every ping-seconds only if is not timeout.
     * @param {?} ping
     * @return {?}
     */
    UserIdleService.prototype.setupPing = /**
     * Setup ping.
     *
     * Pings every ping-seconds only if is not timeout.
     * @param {?} ping
     * @return {?}
     */
    function (ping) {
        var _this = this;
        this.ping$ = interval(ping * 1000).pipe(filter(function () { return !_this.isTimeout; }));
    };
    UserIdleService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    UserIdleService.ctorParameters = function () { return [
        { type: UserIdleConfig, decorators: [{ type: Optional },] },
    ]; };
    /** @nocollapse */ UserIdleService.ngInjectableDef = i0.defineInjectable({ factory: function UserIdleService_Factory() { return new UserIdleService(i0.inject(i1.UserIdleConfig, 8)); }, token: UserIdleService, providedIn: "root" });
    return UserIdleService;
}());
export { UserIdleService };
function UserIdleService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    UserIdleService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    UserIdleService.ctorParameters;
    /** @type {?} */
    UserIdleService.prototype.ping$;
    /**
     * Events that can interrupts user's inactivity timer.
     * @type {?}
     */
    UserIdleService.prototype.activityEvents$;
    /** @type {?} */
    UserIdleService.prototype.timerStart$;
    /** @type {?} */
    UserIdleService.prototype.timeout$;
    /** @type {?} */
    UserIdleService.prototype.idle$;
    /** @type {?} */
    UserIdleService.prototype.timer$;
    /**
     * Idle value in seconds.
     * Default equals to 10 minutes.
     * @type {?}
     */
    UserIdleService.prototype.idle;
    /**
     * Timeout value in seconds.
     * Default equals to 5 minutes.
     * @type {?}
     */
    UserIdleService.prototype.timeout;
    /**
     * Ping value in seconds.
     * * Default equals to 2 minutes.
     * @type {?}
     */
    UserIdleService.prototype.ping;
    /**
     * Timeout status.
     * @type {?}
     */
    UserIdleService.prototype.isTimeout;
    /**
     * Timer of user's inactivity is in progress.
     * @type {?}
     */
    UserIdleService.prototype.isInactivityTimer;
    /** @type {?} */
    UserIdleService.prototype.idleSubscription;
}

//# sourceMappingURL=data:application/json;base64,