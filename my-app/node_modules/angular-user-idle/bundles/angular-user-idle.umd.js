(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('angular-user-idle', ['exports', '@angular/core', 'rxjs', 'rxjs/operators'], factory) :
    (factory((global['angular-user-idle'] = {}),global.ng.core,null,global.Rx.Observable.prototype));
}(this, (function (exports,i0,rxjs,operators) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var UserIdleConfig = (function () {
        function UserIdleConfig() {
        }
        return UserIdleConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * User's idle service.
     */
    var UserIdleService = (function () {
        function UserIdleService(config) {
            this.timerStart$ = new rxjs.Subject();
            this.timeout$ = new rxjs.Subject();
            /**
             * Idle value in seconds.
             * Default equals to 10 minutes.
             */
            this.idle = 600;
            /**
             * Timeout value in seconds.
             * Default equals to 5 minutes.
             */
            this.timeout = 300;
            /**
             * Ping value in seconds.
             * * Default equals to 2 minutes.
             */
            this.ping = 120;
            if (config) {
                this.idle = config.idle;
                this.timeout = config.timeout;
                this.ping = config.ping;
            }
            this.activityEvents$ = rxjs.merge(rxjs.fromEvent(window, 'mousemove'), rxjs.fromEvent(window, 'resize'), rxjs.fromEvent(document, 'keydown'));
            this.idle$ = rxjs.from(this.activityEvents$);
        }
        /**
         * Start watching for user idle and setup timer and ping.
         */
        /**
         * Start watching for user idle and setup timer and ping.
         * @return {?}
         */
        UserIdleService.prototype.startWatching = /**
         * Start watching for user idle and setup timer and ping.
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.idleSubscription) {
                    this.idleSubscription.unsubscribe();
                }
                // If any of user events is not active for idle-seconds when start timer.
                this.idleSubscription = this.idle$
                    .pipe(operators.bufferTime(5000), // Starting point of detecting of user's inactivity
                // Starting point of detecting of user's inactivity
                operators.filter(function (arr) { return !arr.length && !_this.isInactivityTimer; }), operators.tap(function () { return _this.isInactivityTimer = true; }), operators.switchMap(function () {
                    return rxjs.interval(1000).pipe(operators.takeUntil(rxjs.merge(_this.activityEvents$, rxjs.timer(_this.idle * 1000).pipe(operators.tap(function () { return _this.timerStart$.next(true); })))), operators.finalize(function () { return (_this.isInactivityTimer = false); }));
                }))
                    .subscribe();
                this.setupTimer(this.timeout);
                this.setupPing(this.ping);
            };
        /**
         * @return {?}
         */
        UserIdleService.prototype.stopWatching = /**
         * @return {?}
         */
            function () {
                this.stopTimer();
                if (this.idleSubscription) {
                    this.idleSubscription.unsubscribe();
                }
            };
        /**
         * @return {?}
         */
        UserIdleService.prototype.stopTimer = /**
         * @return {?}
         */
            function () {
                this.timerStart$.next(false);
            };
        /**
         * @return {?}
         */
        UserIdleService.prototype.resetTimer = /**
         * @return {?}
         */
            function () {
                this.stopTimer();
                this.isTimeout = false;
            };
        /**
         * Return observable for timer's countdown number that emits after idle.
         */
        /**
         * Return observable for timer's countdown number that emits after idle.
         * @return {?}
         */
        UserIdleService.prototype.onTimerStart = /**
         * Return observable for timer's countdown number that emits after idle.
         * @return {?}
         */
            function () {
                var _this = this;
                return this.timerStart$.pipe(operators.distinctUntilChanged(), operators.switchMap(function (start) { return (start ? _this.timer$ : rxjs.of(null)); }));
            };
        /**
         * Return observable for timeout is fired.
         */
        /**
         * Return observable for timeout is fired.
         * @return {?}
         */
        UserIdleService.prototype.onTimeout = /**
         * Return observable for timeout is fired.
         * @return {?}
         */
            function () {
                var _this = this;
                return this.timeout$.pipe(operators.filter(function (timeout) { return !!timeout; }), operators.tap(function () { return _this.isTimeout = true; }), operators.map(function () { return true; }));
            };
        /**
         * @return {?}
         */
        UserIdleService.prototype.getConfigValue = /**
         * @return {?}
         */
            function () {
                return {
                    idle: this.idle,
                    timeout: this.timeout,
                    ping: this.ping
                };
            };
        /**
         * Set config values.
         * @param config
         */
        /**
         * Set config values.
         * @param {?} config
         * @return {?}
         */
        UserIdleService.prototype.setConfigValues = /**
         * Set config values.
         * @param {?} config
         * @return {?}
         */
            function (config) {
                if (this.idleSubscription && !this.idleSubscription.closed) {
                    console.error('Call stopWatching() before set config values');
                    return;
                }
                if (config.idle) {
                    this.idle = config.idle;
                }
                if (config.ping) {
                    this.ping = config.ping;
                }
                if (config.timeout) {
                    this.timeout = config.timeout;
                }
            };
        /**
         * Setup timer.
         *
         * Counts every seconds and return n+1 and fire timeout for last count.
         * @param timeout Timeout in seconds.
         */
        /**
         * Setup timer.
         *
         * Counts every seconds and return n+1 and fire timeout for last count.
         * @param {?} timeout Timeout in seconds.
         * @return {?}
         */
        UserIdleService.prototype.setupTimer = /**
         * Setup timer.
         *
         * Counts every seconds and return n+1 and fire timeout for last count.
         * @param {?} timeout Timeout in seconds.
         * @return {?}
         */
            function (timeout) {
                var _this = this;
                this.timer$ = rxjs.interval(1000).pipe(operators.take(timeout), operators.map(function () { return 1; }), operators.scan(function (acc, n) { return acc + n; }), operators.tap(function (count) {
                    if (count === timeout) {
                        _this.timeout$.next(true);
                    }
                }));
            };
        /**
         * Setup ping.
         *
         * Pings every ping-seconds only if is not timeout.
         * @param ping
         */
        /**
         * Setup ping.
         *
         * Pings every ping-seconds only if is not timeout.
         * @param {?} ping
         * @return {?}
         */
        UserIdleService.prototype.setupPing = /**
         * Setup ping.
         *
         * Pings every ping-seconds only if is not timeout.
         * @param {?} ping
         * @return {?}
         */
            function (ping) {
                var _this = this;
                this.ping$ = rxjs.interval(ping * 1000).pipe(operators.filter(function () { return !_this.isTimeout; }));
            };
        UserIdleService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */
        UserIdleService.ctorParameters = function () {
            return [
                { type: UserIdleConfig, decorators: [{ type: i0.Optional },] },
            ];
        };
        /** @nocollapse */ UserIdleService.ngInjectableDef = i0.defineInjectable({ factory: function UserIdleService_Factory() { return new UserIdleService(i0.inject(UserIdleConfig, 8)); }, token: UserIdleService, providedIn: "root" });
        return UserIdleService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var UserIdleModule = (function () {
        function UserIdleModule() {
        }
        /**
         * @param {?} config
         * @return {?}
         */
        UserIdleModule.forRoot = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                return {
                    ngModule: UserIdleModule,
                    providers: [
                        { provide: UserIdleConfig, useValue: config }
                    ]
                };
            };
        UserIdleModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: []
                    },] },
        ];
        return UserIdleModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.UserIdleService = UserIdleService;
    exports.UserIdleConfig = UserIdleConfig;
    exports.UserIdleModule = UserIdleModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,