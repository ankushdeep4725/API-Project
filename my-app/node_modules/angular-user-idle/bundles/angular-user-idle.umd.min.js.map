{"version":3,"sources":["ng://angular-user-idle/lib/angular-user-idle.config.ts","ng://angular-user-idle/lib/angular-user-idle.service.ts","ng://angular-user-idle/lib/angular-user-idle.module.ts"],"names":["UserIdleConfig","UserIdleService","config","Subject","this","idle","timeout","ping","activityEvents$","merge","fromEvent","window","document","idle$","from","prototype","startWatching","_this","idleSubscription","unsubscribe","pipe","bufferTime","filter","arr","length","isInactivityTimer","tap","switchMap","interval","takeUntil","timer","timerStart$","next","finalize","subscribe","setupTimer","setupPing","stopWatching","stopTimer","resetTimer","isTimeout","onTimerStart","distinctUntilChanged","start","timer$","of","onTimeout","timeout$","map","getConfigValue","setConfigValues","closed","console","error","take","scan","acc","n","count","ping$","Injectable","args","providedIn","decorators","type","Optional","UserIdleModule","forRoot","ngModule","providers","provide","useValue","NgModule","imports"],"mappings":"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","sourcesContent":["export class UserIdleConfig {\n  /**\n   * Idle value in seconds.\n   */\n  idle: number;\n  /**\n   * Timeout value in seconds.\n   */\n  timeout: number;\n  /**\n   * Ping value in seconds.\n   */\n  ping: number;\n}\n","import { Injectable, Optional } from '@angular/core';\nimport {\n  Observable,\n  Subject,\n  Subscription,\n  merge,\n  fromEvent,\n  from,\n  interval,\n  timer,\n  of\n} from 'rxjs';\nimport {\n  bufferTime,\n  distinctUntilChanged,\n  filter,\n  finalize,\n  map,\n  scan,\n  switchMap,\n  take,\n  takeUntil,\n  tap\n} from 'rxjs/operators';\nimport { UserIdleConfig } from './angular-user-idle.config';\n\n/**\n * User's idle service.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserIdleService {\n  ping$: Observable<any>;\n\n  /**\n   * Events that can interrupts user's inactivity timer.\n   */\n  protected activityEvents$: Observable<any>;\n\n  protected timerStart$ = new Subject<boolean>();\n  protected timeout$ = new Subject<boolean>();\n  protected idle$: Observable<any>;\n  protected timer$: Observable<any>;\n  /**\n   * Idle value in seconds.\n   * Default equals to 10 minutes.\n   */\n  protected idle = 600;\n  /**\n   * Timeout value in seconds.\n   * Default equals to 5 minutes.\n   */\n  protected timeout = 300;\n  /**\n   * Ping value in seconds.\n   * * Default equals to 2 minutes.\n   */\n  protected ping = 120;\n  /**\n   * Timeout status.\n   */\n  protected isTimeout: boolean;\n  /**\n   * Timer of user's inactivity is in progress.\n   */\n  protected isInactivityTimer: boolean;\n\n  protected idleSubscription: Subscription;\n\n  constructor(@Optional() config: UserIdleConfig) {\n    if (config) {\n      this.idle = config.idle;\n      this.timeout = config.timeout;\n      this.ping = config.ping;\n    }\n\n    this.activityEvents$ = merge(\n      fromEvent(window, 'mousemove'),\n      fromEvent(window, 'resize'),\n      fromEvent(document, 'keydown')\n    );\n\n    this.idle$ = from(this.activityEvents$);\n  }\n\n  /**\n   * Start watching for user idle and setup timer and ping.\n   */\n  startWatching() {\n    if (this.idleSubscription) {\n      this.idleSubscription.unsubscribe();\n    }\n\n    // If any of user events is not active for idle-seconds when start timer.\n    this.idleSubscription = this.idle$\n      .pipe(\n        bufferTime(5000), // Starting point of detecting of user's inactivity\n        filter(arr => !arr.length && !this.isInactivityTimer),\n        tap(() => this.isInactivityTimer = true),\n        switchMap(() => interval(1000).pipe(\n          takeUntil(\n            merge(\n              this.activityEvents$,\n              timer(this.idle * 1000).pipe(\n                tap(() => this.timerStart$.next(true))\n              )\n            )\n          ),\n          finalize(() => (this.isInactivityTimer = false))\n          )\n        )\n      )\n      .subscribe();\n\n    this.setupTimer(this.timeout);\n    this.setupPing(this.ping);\n  }\n\n  stopWatching() {\n    this.stopTimer();\n    if (this.idleSubscription) {\n      this.idleSubscription.unsubscribe();\n    }\n  }\n\n  stopTimer() {\n    this.timerStart$.next(false);\n  }\n\n  resetTimer() {\n    this.stopTimer();\n    this.isTimeout = false;\n  }\n\n  /**\n   * Return observable for timer's countdown number that emits after idle.\n   */\n  onTimerStart(): Observable<number> {\n    return this.timerStart$.pipe(\n      distinctUntilChanged(),\n      switchMap(start => (start ? this.timer$ : of(null)))\n    );\n  }\n\n  /**\n   * Return observable for timeout is fired.\n   */\n  onTimeout(): Observable<boolean> {\n    return this.timeout$.pipe(\n      filter(timeout => !!timeout),\n      tap(() => this.isTimeout = true),\n      map(() => true)\n    );\n  }\n\n  getConfigValue(): UserIdleConfig {\n    return {\n      idle: this.idle,\n      timeout: this.timeout,\n      ping: this.ping\n    };\n  }\n\n  /**\n   * Set config values.\n   * @param config\n   */\n  setConfigValues(config: UserIdleConfig) {\n    if (this.idleSubscription && !this.idleSubscription.closed) {\n      console.error('Call stopWatching() before set config values');\n      return;\n    }\n\n    if (config.idle) {\n      this.idle = config.idle;\n    }\n    if (config.ping) {\n      this.ping = config.ping;\n    }\n    if (config.timeout) {\n      this.timeout = config.timeout;\n    }\n  }\n\n  /**\n   * Setup timer.\n   *\n   * Counts every seconds and return n+1 and fire timeout for last count.\n   * @param timeout Timeout in seconds.\n   */\n  protected setupTimer(timeout: number) {\n    this.timer$ = interval(1000).pipe(\n      take(timeout),\n      map(() => 1),\n      scan((acc, n) => acc + n),\n      tap(count => {\n        if (count === timeout) {\n          this.timeout$.next(true);\n        }\n      })\n    );\n  }\n\n  /**\n   * Setup ping.\n   *\n   * Pings every ping-seconds only if is not timeout.\n   * @param ping\n   */\n  protected setupPing(ping: number) {\n    this.ping$ = interval(ping * 1000).pipe(\n      filter(() => !this.isTimeout)\n    );\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { UserIdleConfig } from './angular-user-idle.config';\n\n@NgModule({\n  imports: []\n})\nexport class UserIdleModule {\n  static forRoot(config: UserIdleConfig): ModuleWithProviders {\n    return {\n      ngModule: UserIdleModule,\n      providers: [\n        {provide: UserIdleConfig, useValue: config}\n      ]\n    };\n  }\n}\n"]}