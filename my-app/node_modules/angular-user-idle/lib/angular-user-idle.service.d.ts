import { Observable, Subject, Subscription } from 'rxjs';
import { UserIdleConfig } from './angular-user-idle.config';
/**
 * User's idle service.
 */
export declare class UserIdleService {
    ping$: Observable<any>;
    /**
     * Events that can interrupts user's inactivity timer.
     */
    protected activityEvents$: Observable<any>;
    protected timerStart$: Subject<boolean>;
    protected timeout$: Subject<boolean>;
    protected idle$: Observable<any>;
    protected timer$: Observable<any>;
    /**
     * Idle value in seconds.
     * Default equals to 10 minutes.
     */
    protected idle: number;
    /**
     * Timeout value in seconds.
     * Default equals to 5 minutes.
     */
    protected timeout: number;
    /**
     * Ping value in seconds.
     * * Default equals to 2 minutes.
     */
    protected ping: number;
    /**
     * Timeout status.
     */
    protected isTimeout: boolean;
    /**
     * Timer of user's inactivity is in progress.
     */
    protected isInactivityTimer: boolean;
    protected idleSubscription: Subscription;
    constructor(config: UserIdleConfig);
    /**
     * Start watching for user idle and setup timer and ping.
     */
    startWatching(): void;
    stopWatching(): void;
    stopTimer(): void;
    resetTimer(): void;
    /**
     * Return observable for timer's countdown number that emits after idle.
     */
    onTimerStart(): Observable<number>;
    /**
     * Return observable for timeout is fired.
     */
    onTimeout(): Observable<boolean>;
    getConfigValue(): UserIdleConfig;
    /**
     * Set config values.
     * @param config
     */
    setConfigValues(config: UserIdleConfig): void;
    /**
     * Setup timer.
     *
     * Counts every seconds and return n+1 and fire timeout for last count.
     * @param timeout Timeout in seconds.
     */
    protected setupTimer(timeout: number): void;
    /**
     * Setup ping.
     *
     * Pings every ping-seconds only if is not timeout.
     * @param ping
     */
    protected setupPing(ping: number): void;
}
