{"version":3,"file":"angular-user-idle.js.map","sources":["ng://angular-user-idle/lib/angular-user-idle.config.ts","ng://angular-user-idle/lib/angular-user-idle.service.ts","ng://angular-user-idle/lib/angular-user-idle.module.ts"],"sourcesContent":["export class UserIdleConfig {\n  /**\n   * Idle value in seconds.\n   */\n  idle: number;\n  /**\n   * Timeout value in seconds.\n   */\n  timeout: number;\n  /**\n   * Ping value in seconds.\n   */\n  ping: number;\n}\n","import { Injectable, Optional } from '@angular/core';\nimport {\n  Observable,\n  Subject,\n  Subscription,\n  merge,\n  fromEvent,\n  from,\n  interval,\n  timer,\n  of\n} from 'rxjs';\nimport {\n  bufferTime,\n  distinctUntilChanged,\n  filter,\n  finalize,\n  map,\n  scan,\n  switchMap,\n  take,\n  takeUntil,\n  tap\n} from 'rxjs/operators';\nimport { UserIdleConfig } from './angular-user-idle.config';\n\n/**\n * User's idle service.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserIdleService {\n  ping$: Observable<any>;\n\n  /**\n   * Events that can interrupts user's inactivity timer.\n   */\n  protected activityEvents$: Observable<any>;\n\n  protected timerStart$ = new Subject<boolean>();\n  protected timeout$ = new Subject<boolean>();\n  protected idle$: Observable<any>;\n  protected timer$: Observable<any>;\n  /**\n   * Idle value in seconds.\n   * Default equals to 10 minutes.\n   */\n  protected idle = 600;\n  /**\n   * Timeout value in seconds.\n   * Default equals to 5 minutes.\n   */\n  protected timeout = 300;\n  /**\n   * Ping value in seconds.\n   * * Default equals to 2 minutes.\n   */\n  protected ping = 120;\n  /**\n   * Timeout status.\n   */\n  protected isTimeout: boolean;\n  /**\n   * Timer of user's inactivity is in progress.\n   */\n  protected isInactivityTimer: boolean;\n\n  protected idleSubscription: Subscription;\n\n  constructor(@Optional() config: UserIdleConfig) {\n    if (config) {\n      this.idle = config.idle;\n      this.timeout = config.timeout;\n      this.ping = config.ping;\n    }\n\n    this.activityEvents$ = merge(\n      fromEvent(window, 'mousemove'),\n      fromEvent(window, 'resize'),\n      fromEvent(document, 'keydown')\n    );\n\n    this.idle$ = from(this.activityEvents$);\n  }\n\n  /**\n   * Start watching for user idle and setup timer and ping.\n   */\n  startWatching() {\n    if (this.idleSubscription) {\n      this.idleSubscription.unsubscribe();\n    }\n\n    // If any of user events is not active for idle-seconds when start timer.\n    this.idleSubscription = this.idle$\n      .pipe(\n        bufferTime(5000), // Starting point of detecting of user's inactivity\n        filter(arr => !arr.length && !this.isInactivityTimer),\n        tap(() => this.isInactivityTimer = true),\n        switchMap(() => interval(1000).pipe(\n          takeUntil(\n            merge(\n              this.activityEvents$,\n              timer(this.idle * 1000).pipe(\n                tap(() => this.timerStart$.next(true))\n              )\n            )\n          ),\n          finalize(() => (this.isInactivityTimer = false))\n          )\n        )\n      )\n      .subscribe();\n\n    this.setupTimer(this.timeout);\n    this.setupPing(this.ping);\n  }\n\n  stopWatching() {\n    this.stopTimer();\n    if (this.idleSubscription) {\n      this.idleSubscription.unsubscribe();\n    }\n  }\n\n  stopTimer() {\n    this.timerStart$.next(false);\n  }\n\n  resetTimer() {\n    this.stopTimer();\n    this.isTimeout = false;\n  }\n\n  /**\n   * Return observable for timer's countdown number that emits after idle.\n   */\n  onTimerStart(): Observable<number> {\n    return this.timerStart$.pipe(\n      distinctUntilChanged(),\n      switchMap(start => (start ? this.timer$ : of(null)))\n    );\n  }\n\n  /**\n   * Return observable for timeout is fired.\n   */\n  onTimeout(): Observable<boolean> {\n    return this.timeout$.pipe(\n      filter(timeout => !!timeout),\n      tap(() => this.isTimeout = true),\n      map(() => true)\n    );\n  }\n\n  getConfigValue(): UserIdleConfig {\n    return {\n      idle: this.idle,\n      timeout: this.timeout,\n      ping: this.ping\n    };\n  }\n\n  /**\n   * Set config values.\n   * @param config\n   */\n  setConfigValues(config: UserIdleConfig) {\n    if (this.idleSubscription && !this.idleSubscription.closed) {\n      console.error('Call stopWatching() before set config values');\n      return;\n    }\n\n    if (config.idle) {\n      this.idle = config.idle;\n    }\n    if (config.ping) {\n      this.ping = config.ping;\n    }\n    if (config.timeout) {\n      this.timeout = config.timeout;\n    }\n  }\n\n  /**\n   * Setup timer.\n   *\n   * Counts every seconds and return n+1 and fire timeout for last count.\n   * @param timeout Timeout in seconds.\n   */\n  protected setupTimer(timeout: number) {\n    this.timer$ = interval(1000).pipe(\n      take(timeout),\n      map(() => 1),\n      scan((acc, n) => acc + n),\n      tap(count => {\n        if (count === timeout) {\n          this.timeout$.next(true);\n        }\n      })\n    );\n  }\n\n  /**\n   * Setup ping.\n   *\n   * Pings every ping-seconds only if is not timeout.\n   * @param ping\n   */\n  protected setupPing(ping: number) {\n    this.ping$ = interval(ping * 1000).pipe(\n      filter(() => !this.isTimeout)\n    );\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { UserIdleConfig } from './angular-user-idle.config';\n\n@NgModule({\n  imports: []\n})\nexport class UserIdleModule {\n  static forRoot(config: UserIdleConfig): ModuleWithProviders {\n    return {\n      ngModule: UserIdleModule,\n      providers: [\n        {provide: UserIdleConfig, useValue: config}\n      ]\n    };\n  }\n}\n"],"names":[],"mappings":";;;;;;;;AAAA,IAAA;;;yBAAA;IAaC;;;;;;ACbD;;;;IAsEE,yBAAwB;2BA9BA,IAAI,OAAO,EAAW;wBACzB,IAAI,OAAO,EAAW;;;;;oBAO1B,GAAG;;;;;uBAKA,GAAG;;;;;oBAKN,GAAG;QAalB,IAAI,MAAM,EAAE;YACV,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;YACxB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;YAC9B,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;SACzB;QAED,IAAI,CAAC,eAAe,GAAG,KAAK,CAC1B,SAAS,CAAC,MAAM,EAAE,WAAW,CAAC,EAC9B,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,EAC3B,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,CAC/B,CAAC;QAEF,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;KACzC;;;;;;;;IAKD,uCAAa;;;;IAAb;QAAA,iBA4BC;QA3BC,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACzB,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC;SACrC;;QAGD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,KAAK;aAC/B,IAAI,CACH,UAAU,CAAC,IAAI,CAAC;;QAChB,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,KAAI,CAAC,iBAAiB,GAAA,CAAC,EACrD,GAAG,CAAC,cAAM,OAAA,KAAI,CAAC,iBAAiB,GAAG,IAAI,GAAA,CAAC,EACxC,SAAS,CAAC;YAAM,OAAA,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CACjC,SAAS,CACP,KAAK,CACH,KAAI,CAAC,eAAe,EACpB,KAAK,CAAC,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,IAAI,CAC1B,GAAG,CAAC,cAAM,OAAA,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,GAAA,CAAC,CACvC,CACF,CACF,EACD,QAAQ,CAAC,cAAM,QAAC,KAAI,CAAC,iBAAiB,GAAG,KAAK,IAAC,CAAC,CAC/C;SAAA,CACF,CACF;aACA,SAAS,EAAE,CAAC;QAEf,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC9B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC3B;;;;IAED,sCAAY;;;IAAZ;QACE,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACzB,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC;SACrC;KACF;;;;IAED,mCAAS;;;IAAT;QACE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC9B;;;;IAED,oCAAU;;;IAAV;QACE,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;KACxB;;;;;;;;IAKD,sCAAY;;;;IAAZ;QAAA,iBAKC;QAJC,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAC1B,oBAAoB,EAAE,EACtB,SAAS,CAAC,UAAA,KAAK,IAAI,QAAC,KAAK,GAAG,KAAI,CAAC,MAAM,GAAG,EAAE,CAAC,IAAI,CAAC,IAAC,CAAC,CACrD,CAAC;KACH;;;;;;;;IAKD,mCAAS;;;;IAAT;QAAA,iBAMC;QALC,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CACvB,MAAM,CAAC,UAAA,OAAO,IAAI,OAAA,CAAC,CAAC,OAAO,GAAA,CAAC,EAC5B,GAAG,CAAC,cAAM,OAAA,KAAI,CAAC,SAAS,GAAG,IAAI,GAAA,CAAC,EAChC,GAAG,CAAC,cAAM,OAAA,IAAI,GAAA,CAAC,CAChB,CAAC;KACH;;;;IAED,wCAAc;;;IAAd;QACE,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,IAAI,EAAE,IAAI,CAAC,IAAI;SAChB,CAAC;KACH;;;;;;;;;;IAMD,yCAAe;;;;;IAAf,UAAgB,MAAsB;QACpC,IAAI,IAAI,CAAC,gBAAgB,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE;YAC1D,OAAO,CAAC,KAAK,CAAC,8CAA8C,CAAC,CAAC;YAC9D,OAAO;SACR;QAED,IAAI,MAAM,CAAC,IAAI,EAAE;YACf,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;SACzB;QACD,IAAI,MAAM,CAAC,IAAI,EAAE;YACf,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;SACzB;QACD,IAAI,MAAM,CAAC,OAAO,EAAE;YAClB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;SAC/B;KACF;;;;;;;;;;;;;;IAQS,oCAAU;;;;;;;IAApB,UAAqB,OAAe;QAApC,iBAWC;QAVC,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAC/B,IAAI,CAAC,OAAO,CAAC,EACb,GAAG,CAAC,cAAM,OAAA,CAAC,GAAA,CAAC,EACZ,IAAI,CAAC,UAAC,GAAG,EAAE,CAAC,IAAK,OAAA,GAAG,GAAG,CAAC,GAAA,CAAC,EACzB,GAAG,CAAC,UAAA,KAAK;YACP,IAAI,KAAK,KAAK,OAAO,EAAE;gBACrB,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC1B;SACF,CAAC,CACH,CAAC;KACH;;;;;;;;;;;;;;IAQS,mCAAS;;;;;;;IAAnB,UAAoB,IAAY;QAAhC,iBAIC;QAHC,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,IAAI,CACrC,MAAM,CAAC,cAAM,OAAA,CAAC,KAAI,CAAC,SAAS,GAAA,CAAC,CAC9B,CAAC;KACH;;gBAzLF,UAAU,SAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;;gBAPQ,cAAc,uBA8CR,QAAQ;;;0BAtEvB;;;;;;;ACAA;;;;;;;IAOS,sBAAO;;;;IAAd,UAAe,MAAsB;QACnC,OAAO;YACL,QAAQ,EAAE,cAAc;YACxB,SAAS,EAAE;gBACT,EAAC,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,MAAM,EAAC;aAC5C;SACF,CAAC;KACH;;gBAXF,QAAQ,SAAC;oBACR,OAAO,EAAE,EAAE;iBACZ;;yBALD;;;;;;;;;;;;;;;"}
